#include "catch.hpp"
#include "../src/Eigen/Dense"

#include "../src/sigma_points.h"

TEST_CASE("Create Sigma Points", "[math]") {
  constexpr size_t n = 5;
  //set example state
  //Eigen::VectorXd x(n);
  sigma_points::State<n> x;
  x << 5.7441,
       1.3800,
       2.2049,
       0.5015,
       0.3528;

  //set example covariance matrix
  //Eigen::MatrixXd P(n, n);
  sigma_points::Covariance<n> P;
  P <<  0.0043, -0.0013,  0.0030, -0.0022, -0.0020,
       -0.0013,  0.0077,  0.0011,  0.0071,  0.0060,
        0.0030,  0.0011,  0.0054,  0.0007,  0.0008,
       -0.0022,  0.0071,  0.0007,  0.0098,  0.0100,
       -0.0020,  0.0060,  0.0008,  0.0100,  0.0123;

  //Eigen::MatrixXd Esp(n, 2*n + 1);
  sigma_points::SigmaPoints<n, sigma_points::NSigma(n)> Esp;
  Esp <<  5.7441,  5.85768,   5.7441,   5.7441,   5.7441,   5.7441,  5.63052,   5.7441,   5.7441,   5.7441,   5.7441,
            1.38,  1.34566,  1.52806,     1.38,     1.38,     1.38,  1.41434,  1.23194,     1.38,     1.38,     1.38,
          2.2049,  2.28414,  2.24557,  2.29582,   2.2049,   2.2049,  2.12566,  2.16423,  2.11398,   2.2049,   2.2049,
          0.5015,  0.44339, 0.631886, 0.516923, 0.595227,   0.5015,  0.55961, 0.371114, 0.486077, 0.407773,   0.5015,
          0.3528, 0.299973, 0.462123, 0.376339,  0.48417, 0.418721, 0.405627, 0.243477, 0.329261,  0.22143, 0.286879;
  
  auto package = sigma_points::create(x, P);
  auto const& sigma = std::get<0>(package);
  auto lambda = std::get<1>(package);
  REQUIRE(((sigma - Esp).array().abs() < 1e-5).all());
  REQUIRE(Approx(3. - n) == lambda);
}

TEST_CASE("Predict mean/covariance", "[math]") {
  constexpr size_t n = 5;
  constexpr size_t s = 15;
  sigma_points::SigmaPoints<n, s> SP;
  SP <<
         5.9374,  6.0640,   5.925,  5.9436,  5.9266,  5.9374,  5.9389,  5.9374,  5.8106,  5.9457,  5.9310,  5.9465,  5.9374,  5.9359,  5.93744,
           1.48,  1.4436,   1.660,  1.4934,  1.5036,    1.48,  1.4868,    1.48,  1.5271,  1.3104,  1.4787,  1.4674,    1.48,  1.4851,    1.486,
          2.204,  2.2841,  2.2455,  2.2958,   2.204,   2.204,  2.2395,   2.204,  2.1256,  2.1642,  2.1139,   2.204,   2.204,  2.1702,   2.2049,
         0.5367, 0.47338, 0.67809, 0.55455, 0.64364, 0.54337,  0.5367, 0.53851, 0.60017, 0.39546, 0.51900, 0.42991, 0.530188,  0.5367, 0.535048,
          0.352, 0.29997, 0.46212, 0.37633,  0.4841, 0.41872,   0.352, 0.38744, 0.40562, 0.24347, 0.32926,  0.2214, 0.28687,   0.352, 0.318159;

  sigma_points::State<n> ex;
  ex <<  5.93637,
         1.49035,
         2.20528,
        0.536853,
        0.353577;

  sigma_points::Covariance<n> eP;
  eP <<
     0.00543425, -0.0024053,  0.00341576, -0.00348196, -0.00299378,
     -0.0024053  , 0.010845,   0.0014923,  0.00980182,  0.00791091,
     0.00341576,  0.0014923,  0.00580129, 0.000778632, 0.000792973,
    -0.00348196, 0.00980182, 0.000778632,   0.0119238,   0.0112491,
    -0.00299378, 0.00791091, 0.000792973,   0.0112491,   0.0126972;
  
  auto p = sigma_points::predict(SP, 3. - (s - 1)/2);
  REQUIRE(((std::get<0>(p) - ex).array().abs() < 1e-5).all());
  REQUIRE(((std::get<1>(p) - eP).array().abs() < 1e-7).all());
}
